// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}


model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  kakaoId               String?        @unique
  avatarUrl             String?
  bio                   String?
  isAdmin               Boolean        @default(false)
  sessions              Session[]
  posts                 Post[]
  blogPosts             BlogPost[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  blogLikes             BlogLike[]
  bookmarks             Bookmark[]
  blogBookmarks         BlogBookmark[]
  comments              Comment[]
  blogComments          BlogComment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  postViews             PostView[]
  blogPostViews         BlogPostView[]
  chatParticipations ChatParticipant[] // chat
  chatMessages      ChatMessage[] //chat
 blockedUsers   UserBlock[] @relation("Blocker")  // 내가 차단한 사용자들
  blockedByUsers UserBlock[] @relation("Blocked")  // 나를 차단한 사용자들
  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  views               PostView[]
  viewCount           Int            @default(0)
  bookmarks           Bookmark[]
  comments            Comment[]
  booktitle String?
  bookauthor String?
  linkedNotifications Notification[]
  youtubeLinks String[] @default([])

  createdAt DateTime @default(now())

  // 인용 관련 필드 추가 ( 나중에 구현 )
  quotedPostId  String?
  quotedPost    Post?     @relation("QuotedPosts", fields: [quotedPostId], references: [id])
  quotedByPosts Post[]    @relation("QuotedPosts")

  
  @@index([quotedPostId])

  @@map("posts")
}

model BlogPost {
  id                  String           @id @default(cuid())
  title               String
  content             String           @db.Text
  excerpt             String?
  slug                String           @unique
  userId              String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         BlogMedia[]
  likes               BlogLike[]
  views               BlogPostView[]
  viewCount           Int              @default(0)
  bookmarks           BlogBookmark[]
  comments            BlogComment[]
  linkedNotifications Notification[]
  published           Boolean          @default(false)
  tags                String[]         @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_posts")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  createdAt DateTime  @default(now())

  @@map("post_media")
}

model BlogMedia {
  id        String    @id @default(cuid())
  postId    String?
  post      BlogPost? @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  createdAt DateTime  @default(now())

  @@map("blog_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id        String   @id @default(cuid())
  content   String?  // null 허용
  deleted   Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())

  @@map("comments")
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    BlogComment?  @relation("BlogCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   BlogComment[] @relation("BlogCommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_comments")
}

model Like {
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model BlogLike {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("blog_likes")
}

model PostView {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  viewedAt  DateTime @default(now())

  @@unique([postId, userId])
  @@map("post_views")
}

model BlogPostView {
  id        String   @id @default(cuid())
  post      BlogPost @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  viewedAt  DateTime @default(now())

  @@unique([postId, userId])
  @@map("blog_post_views")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model BlogBookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("blog_bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  blogPostId  String?
  blogPost    BlogPost?        @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  BLOG_LIKE
  BLOG_COMMENT
}

// prisma/schema.prisma에 추가할 모델들

// 채팅방 모델
model ChatRoom {
  id            String         @id @default(cuid())
  name          String?       // 그룹챗의 경우 이름이 있을 수 있음
  type          ChatRoomType  @default(DIRECT)
  lastMessageAt DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // 관계
  participants  ChatParticipant[]
  messages      ChatMessage[]
  
  isBlocked     Boolean   @default(false)  // 채팅방이 차단되었는지 여부
  blockedAt     DateTime? // 차단된 시간
  blockedById   String?   // 차단한 사용자 ID
  blockReason   String?   // 차단 사유
  @@map("chat_rooms")
}

enum ChatRoomType {
  DIRECT    // 1:1 채팅
  GROUP     // 그룹 채팅
}

model ChatParticipant {
  id            String    @id @default(cuid())
  userId        String    // Lucia의 User.id와 매칭
  chatRoomId    String
  lastReadAt    DateTime  @default(now())
  joinedAt      DateTime  @default(now())
  
  // 관계
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom      ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
  @@index([userId])
  @@index([chatRoomId])
  @@map("chat_participants")
}

model ChatMessage {
  id          String        @id @default(cuid())
  content     String        @db.Text
  type        ChatMessageType @default(TEXT)
  createdAt   DateTime      @default(now())
  readBy      String[]      // 읽은 사용자 ID 배열
  
  // 관계
  userId      String      // Lucia의 User.id와 매칭
  chatRoomId  String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([chatRoomId])
  @@map("chat_messages")
}

enum ChatMessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

// 유저 차단 모델
model UserBlock {
  id            String    @id @default(cuid())
  blockerId     String    // 차단한 사용자
  blockedId     String    // 차단된 사용자
  reason        String?   // 차단 사유 (선택사항)
  createdAt     DateTime  @default(now())
  
  // 관계 설정
  blocker       User      @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked       User      @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@map("user_blocks")
}
